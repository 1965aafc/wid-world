// Import the WID to know the list of required currencies and associated countries
use "$work_data/price-index.dta", clear
keep iso currency
drop if currency == ""
duplicates drop
tempfile countries
save "`countries'"

// Remove some problematic currencies (to be dealth with later)
drop if (currency == "USD")
drop if (currency == "ERN")
drop if (currency == "SSP")
drop if (currency == "YUN")

// Loop over currencies and get exchange rates from Quandl
quietly levelsof currency, local(currencies)

local downloadyear $pastyear
foreach CUR of local currencies {
	// Get data
	quandl, quandlcode(CURRFX/USD`CUR') start(`downloadyear'-01-01) end(`downloadyear'-12-31) ///
		auth(j3SA6jh-S4pZxGf9aF2y) clear
	
	collapse (mean) rate
	
	generate currency = "`CUR'"
	
	merge 1:n currency using "`countries'", nogenerate
	save "`countries'", replace
}

replace rate = 1                 if (currency == "USD")
replace rate = 3                 if (currency == "SSP")
replace rate = 15.45             if (currency == "ERN")
replace rate = 4.0091*0.61712015 if (currency == "YUN")

// Correct 2016 exchange rate for Venezuela
assert $pastyear == 2016
replace rate=128.47871 if currency=="VEF"

// Generate exchange rates with euro and yuan
rename rate valuexlcusx999i
// Exchange rate with euro
quietly levelsof valuexlcusx999i if (currency == "EUR"), local(exchrate_eu) clean
generate valuexlceux999i = valuexlcusx999i/`exchrate_eu'

// Exchange rate with Yuan
quietly levelsof valuexlcusx999i if (currency == "CNY"), local(exchrate_cn) clean
generate valuexlcyux999i = valuexlcusx999i/`exchrate_cn'

// Sanity checks
assert valuexlceux999i == 1 if (currency == "EUR")
assert valuexlcusx999i == 1 if (currency == "USD")
assert valuexlcyux999i == 1 if (currency == "CNY")

reshape long value, i(iso) j(widcode) string

generate year = 2016
generate p = "pall"

label data "Generated by import-exchange-rates.do"
save "$work_data/exchange-rates.dta", replace
